name: Example composite action
description: This is an example of creating composite action

inputs:
  appName:
    description: Application name
    required: true
  containerRegistryUrl:
    description: GCP container registry url
    required: false
    default: europe-west3-docker.pkg.dev
  containerRegistryGcpProject:
    description: The GCP project of container image registry
    required: false
    default: my-project
  buildCacheEnabled:
    description: Enable caching in docker build
    required: false
    default: 'true'
outputs:
  containerImages:
    description: Built container image url
    value: ${{ steps.image-tags.outputs.tags }}
runs:
  using: "composite"
  steps:
    - name: Prepare Image tags
      id: image-tags
      shell: bash
      run: |
        base=${{ inputs.containerRegistryUrl }}/${{ inputs.containerRegistryGcpProject }}/${{ inputs.appName }}/${{ inputs.appName }}

        ## Default image tag is 'latest'
        ##
        tags="${base}:latest"

        ## Set semantic version as image tag if a GitHub tag
        ## is created. Tag should follow semver format 'v[0-9]+.[0-9]+.[0-9]+'
        ##
        if [[ '${{ github.ref }}' == *"refs/tags/"* ]]; then
          github_tag=$(echo "${GITHUB_REF#refs/*/}" | sed 's/^v//')
          tags=$(cat <<END_HEREDOC
        ${base}:${github_tag}
        END_HEREDOC
        )

        ## Set 'latest' image tag if 'main' or 'master' 
        ## branch is pushed
        ##
        elif [[ '${{ github.ref }}' == 'refs/heads/master' || '${{ github.ref }}' == 'refs/heads/main' ]]; then
          tags=$(cat <<END_HEREDOC
        ${base}:latest
        END_HEREDOC
          )
        
        ## Set short commit SHA and PR number as image tags
        ## for the Pull Request pushed
        ##
        elif [[ '${{ github.event_name }}' == 'pull_request' ]]; then
          tags=$(cat <<END_HEREDOC      
        ${base}:$(git rev-parse --short ${{ github.event.pull_request.head.sha }})
        ${base}:pr-${{ github.event.number }}
        END_HEREDOC
          )

        ## Set short commit SHA as image tag for other cases
        ##
        elif [[ '${{ github.event_name }}' == 'push' ]]; then
          tags=$(cat <<END_HEREDOC
        ${base}:$(git rev-parse --short HEAD)
        END_HEREDOC
          )

        fi

        ## Print tags for debugging purpose
        ##
        echo "[INFO] tags: ${tags}"

        ## Set tags output
        ##
        echo "tags<<EOF" >> $GITHUB_OUTPUT
        echo "$tags" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx for building docker images
      uses: docker/setup-buildx-action@v1

    - name: Set Docker build cache list
      id: set-build-cache
      shell: bash
      run: |
        cache_from=""
        cache_to=""
        
        if [[ '${{ inputs.buildCacheEnabled }}' == 'true' ]]; then
          cache_from="type=registry,ref=${{ inputs.containerRegistryUrl }}/${{ inputs.containerRegistryGcpProject }}/${{ inputs.appName }}/${{ inputs.appName }}:buildcache"
          cache_to="type=registry,ref=${{ inputs.containerRegistryUrl }}/${{ inputs.containerRegistryGcpProject }}/${{ inputs.appName }}/${{ inputs.appName }}:buildcache,mode=max"
        fi

        echo "cache_from=$cache_from" >> $GITHUB_OUTPUT
        echo "cache_to=$cache_to" >> $GITHUB_OUTPUT

    - name: Build and push docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: false
        tags: ${{ steps.image-tags.outputs.tags }}
        cache-from: ${{ steps.set-build-cache.outputs.cache_from }}
        cache-to: ${{ steps.set-build-cache.outputs.cache_to }}
